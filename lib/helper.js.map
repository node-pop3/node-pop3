{"version":3,"file":"helper.js","names":["_constant","require","_os","stream2String","stream","maxBufferSize","maxLength","RAM","totalmem","Promise","resolve","reject","streamTimeout","setTimeout","Error","finalBufferArr","finalBufferLength","bufferChunk","Buffer","concat","bufferLength","length","on","_buffer","bufferToPush","push","err","finalBuffer","clearTimeout","toString","listify","str","split","CRLF","filter","line","map"],"sources":["../src/helper.mjs"],"sourcesContent":["import { CRLF } from './constant.mjs';\nimport { totalmem } from 'os';\n\nexport function stream2String(stream, maxBufferSize) {\n\n  let maxLength = maxBufferSize;\n  if (!maxLength) {\n    const RAM = totalmem/1024/1024/1024;\n    if (RAM <= 1) maxLength = 1*1024*1024;\n    else if (RAM <= 2) maxLength = 2*1024*1024;\n    else maxLength = 4*1024*1024;\n  }\n  return new Promise((resolve, reject) => {\n    const streamTimeout = setTimeout(() => {\n      reject(new Error('stream2String timeout'))\n    }, 10*60*1000);\n\n    const finalBufferArr = [];\n    let finalBufferLength = 0;\n    let bufferChunk = Buffer.concat([]);\n    let bufferLength = bufferChunk.length;\n    stream.on('data', (_buffer) => {\n      bufferLength += _buffer.length;\n      finalBufferLength += _buffer.length;\n      if (bufferLength >= maxLength) {\n        const bufferToPush = Buffer.concat([bufferChunk, _buffer], bufferLength);\n        finalBufferArr.push(bufferToPush);\n        bufferChunk = Buffer.concat([]);\n        bufferLength = bufferChunk.length;\n      }\n      else bufferChunk = Buffer.concat([bufferChunk, _buffer], bufferLength);\n    });\n    stream.on('error', (err) => reject(err));\n    stream.on('end', () => {\n      let finalBuffer;\n      if (finalBufferArr.length !== 0) {\n        finalBufferArr.push(bufferChunk);\n        finalBuffer = Buffer.concat(finalBufferArr, finalBufferLength);\n      } else finalBuffer = bufferChunk;\n      clearTimeout(streamTimeout)\n      resolve(finalBuffer.toString());\n    });\n  });\n}\n\nexport function listify(str) {\n  return str.split(CRLF)\n    .filter((line) => line)\n    .map((line) => line.split(' '));\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,GAAA,GAAAD,OAAA;AAEO,SAASE,aAAaA,CAACC,MAAM,EAAEC,aAAa,EAAE;EAEnD,IAAIC,SAAS,GAAGD,aAAa;EAC7B,IAAI,CAACC,SAAS,EAAE;IACd,IAAMC,GAAG,GAAGC,YAAQ,GAAC,IAAI,GAAC,IAAI,GAAC,IAAI;IACnC,IAAID,GAAG,IAAI,CAAC,EAAED,SAAS,GAAG,CAAC,GAAC,IAAI,GAAC,IAAI,CAAC,KACjC,IAAIC,GAAG,IAAI,CAAC,EAAED,SAAS,GAAG,CAAC,GAAC,IAAI,GAAC,IAAI,CAAC,KACtCA,SAAS,GAAG,CAAC,GAAC,IAAI,GAAC,IAAI;EAC9B;EACA,OAAO,IAAIG,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACtC,IAAMC,aAAa,GAAGC,UAAU,CAAC,YAAM;MACrCF,MAAM,CAAC,IAAIG,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC5C,CAAC,EAAE,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC;IAEd,IAAMC,cAAc,GAAG,EAAE;IACzB,IAAIC,iBAAiB,GAAG,CAAC;IACzB,IAAIC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,CAAC;IACnC,IAAIC,YAAY,GAAGH,WAAW,CAACI,MAAM;IACrCjB,MAAM,CAACkB,EAAE,CAAC,MAAM,EAAE,UAACC,OAAO,EAAK;MAC7BH,YAAY,IAAIG,OAAO,CAACF,MAAM;MAC9BL,iBAAiB,IAAIO,OAAO,CAACF,MAAM;MACnC,IAAID,YAAY,IAAId,SAAS,EAAE;QAC7B,IAAMkB,YAAY,GAAGN,MAAM,CAACC,MAAM,CAAC,CAACF,WAAW,EAAEM,OAAO,CAAC,EAAEH,YAAY,CAAC;QACxEL,cAAc,CAACU,IAAI,CAACD,YAAY,CAAC;QACjCP,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,CAAC;QAC/BC,YAAY,GAAGH,WAAW,CAACI,MAAM;MACnC,CAAC,MACIJ,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,CAACF,WAAW,EAAEM,OAAO,CAAC,EAAEH,YAAY,CAAC;IACxE,CAAC,CAAC;IACFhB,MAAM,CAACkB,EAAE,CAAC,OAAO,EAAE,UAACI,GAAG;MAAA,OAAKf,MAAM,CAACe,GAAG,CAAC;IAAA,EAAC;IACxCtB,MAAM,CAACkB,EAAE,CAAC,KAAK,EAAE,YAAM;MACrB,IAAIK,WAAW;MACf,IAAIZ,cAAc,CAACM,MAAM,KAAK,CAAC,EAAE;QAC/BN,cAAc,CAACU,IAAI,CAACR,WAAW,CAAC;QAChCU,WAAW,GAAGT,MAAM,CAACC,MAAM,CAACJ,cAAc,EAAEC,iBAAiB,CAAC;MAChE,CAAC,MAAMW,WAAW,GAAGV,WAAW;MAChCW,YAAY,CAAChB,aAAa,CAAC;MAC3BF,OAAO,CAACiB,WAAW,CAACE,QAAQ,EAAE,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEO,SAASC,OAAOA,CAACC,GAAG,EAAE;EAC3B,OAAOA,GAAG,CAACC,KAAK,CAACC,cAAI,CAAC,CACnBC,MAAM,CAAC,UAACC,IAAI;IAAA,OAAKA,IAAI;EAAA,EAAC,CACtBC,GAAG,CAAC,UAACD,IAAI;IAAA,OAAKA,IAAI,CAACH,KAAK,CAAC,GAAG,CAAC;EAAA,EAAC;AACnC"}